
When DOCS based on finaly POD (and before appended to .PM):

   o check for C<> (e.g., DItem)
   o remove unnecessary multiple blank lines
   o sort STANDARD OPTIONS add -class (-)?Name in not
     there
   o fmt -60  tix manpages, they have very long lines
   o subs ' $([a-z]+)->method(?arg arg ...?)' with
     'I<\$$1>-E<gt>method.....'   also insert ','!
   o convert L<> to new names
   o check for Tk::*  not converted to L<>
   o remove suprious =back as first POD in file.  Why are they there??????????????

################################################################

   o event:
	* EVENT FIELDS,  search 'path name'  does also a
	  widget ref work?
	* add wrapper so example can is cut/paste/run ready

   o Canvas
	* document CanvasBind|Focus aka Tk::bind
	* focus|bind descrition (=over/=back in sec. paragraph)
	* ?? canvas has xyscroll bindings by default (docs says
	  otherwise) ???

   o	compare pod in my tkdocs with automatic conveted pages

#############################################################################

I asked, Nick answered:

>P.S. Not worth a seperate mail. I noticed
>
>ptksh> p $mw->Display
>DisplayPtr=SCALAR(0x1403b49a0)|
>ptksh>
>
>does not bless into sub name space of Tk.

This is old news i.e. it never has. This 'default' xsubpp stuff. I don't like it either,
but as Display is X thing, it makes a sort of sense as Display * (i.e. DisplayPtr) might
me a way to comminicate between Tk and Motif or OpenGL apps.

If you want to start a file of "odd things to fix / document" then add this to it ...

#############################################################################

I asked, Nick answered:

>In order to save resources I tried to share a menu between
>many MenuButtons, and many cascades widgets and 'Popups' (example below).
>
>Popup has no problems.  But Menubuttons insist that the menu is a child
>of it:
>

This is one of things Tk800 is supposed to fix. (But it won't save many resources
as it fixes it but automatically 'cloning' menu as child of correct parent.)

If you have problems with Tk800 then chances are perl code we inherited from 
Tk40? is enforcing old rules.

>Tk::Error: Cannot post .menu : not a descendant of .menubutton
>at /home/ach/data9/perl5.004_55/site+sysmalloc/auto/Tk/Menubutton/Post.al line 29.
>
>and cascade does not complain and open an empty (sub)menu.
>(I wonder why Menubutton and cascade behave differently in tk800).

Because they are very different.

>
>Do I miss an option?   If is there another easier way to achieve it?
>without deriving a button that looks/act like a menu button and adding
>I to expend Popup with -over=>'widget' so the Popup pops up where a menu
>would do?

In Tk800 just avoid Menubutton altogether and use Menubar. This is more portable and
will get a lot of attention. Menubuttons seem to be there just for backward compatibility
and Optionmenu.
###############################################################################

	o Document Tk/Menubar (remove mann/menubar.n, pure tcl)

	o perl/tk pod  and tcl/tk conflicts !!!!!!!!!!!

		* optionMenu (.n is pure tcl and OptionMenu has already pod

		* where is after.n is it merged as POD in Tk::After.pm

	o When L<show this|man/section is accepted:

		o ask Nick: Okay to include modified pod2man?
		o     Tom: Okay that Nick includes modified pod2man?

		o Modify STANDARD OPTIONS:

			  (tix versus tk convention)
			* use B<L<whatever|ptkOptions/Name: whatever>>
		   Note L<> dependend
			* use consistently whatever or -whatever
			* add -class when not listed
			* consitent sorting some l-r first other up-down first
			* check if everything in STD OPT is realy listed there?

		o check \w+Cmd command option to link callback -> L<callback|ptkCallbacks>

		o modify SEE ALSO

		o replace \fBwhatever\fR or L<whatever.pod> with
		  L<whatever|Tk::Whatever>
		

        o check /path name|pathname/i

	o Generate L<> in mann for Tk_GetPixels, Tk_GetBitmap, Tk_GetColor,
	  Tk_GetBoolean, Tk_ConfigureInfo.  Are other Tk_[A-Z]\w  ?

	o fix whatever(n|3) remnants (or another tkman2pod try?)

	o check $widget remnants instead of $whatever

	o new event and font pages:  Method names etc. should
	  be converted from tcl -> perl

	o 'Normal' callback

		[ $obj, 'method', ...]

	  not documented (tested with Button -command). So is this
	  true for all callbacks?

	o  Diff 'Normal' and 'bind' callback

	     Button(-command=>'subname') -> Tk::Button::subname()

	  (misleading documented in callback manpage) but

	     $button->bind(<whatever>, 'method') -> $button->method

	  Too late to change that 'normal' works like 'bind' callback?


        o grep for EXAMPLE and translate the to perl/Tk

	o EXAMPLE in DItem.n is in TCL. Learn how to translate it :-)

	o Check standard option: Tk4.2 pages use resource name
	  Tk8.0 uses option name as first item. (I think)

	o Tcl remnant I saw:

	  * choseColors.n  button .b in EXAMPLE section
	  * event.n          needs hand tuning
	  * getopenFile.n    "     "    "
	  * loadTk	     applicable? Doc Rewrite?
	  * tk.n 		is plain tcl  (replace with my
				incomplete version in Tk.pm?)

	  o dialog.n  describes tcl version
	  o mesageBox "
	  o popup
